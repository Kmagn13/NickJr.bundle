METALINK = 'http://www.nickjr.com/dynamo/video/data/mrssGen.jhtml?mgid='
PLAYSERVER = 'http://media.mtvnservices.com/'
FLV_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

NAMESPACES = {'media':'http://search.yahoo.com/mrss/'}
ICON = 'icon-default.png'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	clip = url.replace(PLAYSERVER, '')
	clipinfo = XML.ElementFromURL(METALINK + clip)

	title = clipinfo.xpath('//media:title', namespaces=NAMESPACES)[0].text		
	thumb = clipinfo.xpath('//media:thumbnail', namespaces=NAMESPACES)[0].get('url')
	summary = clipinfo.xpath('//media:description', namespaces=NAMESPACES)[0].text

	try:
		duration = int(clipinfo.xpath('//media:content', namespaces=NAMESPACES)[0].get('duration')) * 1000
	except:
		duration = None

	return VideoClipObject(
		url = url,
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback=R(ICON))
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="1000", index=0))
			],
			bitrate = 1000,
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '480',
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="900", index=0))
			],
			bitrate = 900,
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '480',
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="650", index=0))
			],
			bitrate = 650,
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '360',
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=0))
			],
			bitrate = 400,
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '288',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate='400', index=0):

	BITRATES = ['250', '400', '650', '900', '1000']

	clip = url.replace(PLAYSERVER, '')
	mrss_data = XML.ElementFromURL(METALINK + clip)
	player_url = mrss_data.xpath('//media:content', namespaces=NAMESPACES)[index].get('url')
	player_data = HTML.ElementFromURL(player_url)

	try:
		rtmp_url = player_data.xpath('//rendition[@bitrate="'+bitrate+'"]/src')[0].text
	except:
		index = BITRATES.index(bitrate)
		while index > -1:
			try:
				rtmp_url = player_data.xpath('//rendition/src')[index].text
				break
			except:
				index = index - 1

	stream_url = rtmp_url.split('/viacomnickstrm/')[1]
	video_url = FLV_URL % stream_url

	return IndirectResponse(VideoClipObject, key=video_url)
