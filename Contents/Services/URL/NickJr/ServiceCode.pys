METALINK = 'http://www.nickjr.com/dynamo/video/data/mrssGen.jhtml?mgid=mgid:cms:item:nickjr.com:%s'
MEDIALINK = 'http://media-utils-api.mtvnservices.com/services/MediaGenerator/mgid:cms:item:nickjr.com:%s'

NAMESPACES = {'media':'http://search.yahoo.com/mrss/'}
RE_BITRATE = Regex('_(\d+)_?[^._]*\.mp4')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	clip_id = url.split('mgid:cms:item:nickjr.com:')[-1]
	clip_info = XML.ElementFromURL(METALINK % (clip_id))

	title = clip_info.xpath('//media:title/text()', namespaces=NAMESPACES)[0]
	thumb = clip_info.xpath('//media:thumbnail/@url', namespaces=NAMESPACES)[0]
	summary = clip_info.xpath('//media:description/text()', namespaces=NAMESPACES)[0]

	try:
		duration = int(clip_info.xpath('//media:content/@duration', namespaces=NAMESPACES)[0]) * 1000
	except:
		duration = None

	return VideoClipObject(
		url = url,
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	try:
		clip_id = url.split('mgid:cms:item:nickjr.com:')[-1]
		video_data = XML.ElementFromURL(MEDIALINK % (clip_id))
	except:
		raise Ex.MediaNotAvailable

	available_streams = {}
	renditions = video_data.xpath('//rendition[@type="video/mp4"]')

	if len(renditions) < 1:
		raise Ex.MediaNotAvailable

	for rendition in renditions:

		if int(rendition.get('height')) < 360:
			continue

		rtmp_url = rendition.xpath('./src/text()')[0]
		bitrate = RE_BITRATE.search(rtmp_url).group(1)

		if bitrate not in available_streams:
			available_streams[bitrate] = []

		part = {}
		part['duration'] = rendition.get('duration')
		part['height'] = rendition.get('height')
		part['rtmp_url'] = rtmp_url

		available_streams[bitrate].append(part)

	media_objects = []
	bitrates = [int(i) for i in available_streams.keys()]
	bitrates.sort(reverse=True)

	for bitrate in bitrates:

		parts = []

		for part in available_streams[str(bitrate)]:

			parts.append(
				PartObject(
					key = RTMPVideoURL(
						url='rtmpe://viacommtvstrmfs.fplive.net:1935/viacommtvstrm',
						clip='mp4:%s' % (part['rtmp_url'].split('/viacomnickstrm/')[-1])
					),
					duration = int(part['duration'])*1000
				)
			)

			video_resolution = int(part['height'])

		media_objects.append(
			MediaObject(
				parts = parts,
				bitrate = bitrate,
				video_resolution = video_resolution
			)
		)

	return media_objects
